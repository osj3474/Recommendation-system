b <- seq(1, 10, 3)
b
b <- seq(1, 10, 3)
b
c <- c(1, 5, 2, 7, 8)
c-b
pkg = c('magrittr', 'quantmod', 'rvest', 'httr', 'jsonlite', 'readr', 'readxl', 'stringr', 'lubridate', 'dplyr', 'tidyr', 'ggplot2', 'corrplot',
'dygraphs', 'highcharter', 'plotly', 'PerformanceAnalytics', 'nloptr', 'quadprog', 'RiskPortfolios', 'cccp', 'timetk', 'broom', 'stargazer')
new.pkg = pkg[!(pkg %in% installed.packages()[,"Package"])]
if(length(new.pkg)){
installed.packages(new.pkg, dependencies=TRUE)
}
install.packages('magrittr', dependencies = TRUE)
install.packages('quantmod', dependencies = TRUE)
install.packages('rvest', dependencies = TRUE)
install.packages('httr', dependencies = TRUE)
install.packages('jsonlite', dependencies = TRUE)
install.packages('readr', dependencies = TRUE)
install.packages('readxl', dependencies = TRUE)
install.packages('stringr', dependencies = TRUE)
install.packages('readr', dependencies = TRUE)
install.packages('readxl', dependencies = TRUE)
install.packages('stringr', dependencies = TRUE)
install.packages('lubridate', dependencies = TRUE)
install.packages('dplyr', dependencies = TRUE)
install.packages('tidyr', dependencies = TRUE)
install.packages('ggplot2', dependencies = TRUE)
install.packages('corrplot', dependencies = TRUE)
install.packages('dygraphs', dependencies = TRUE)
install.packages('highcharter', dependencies = TRUE)
install.packages('plotly', dependencies = TRUE)
install.packages('PerformanceAnalytics', dependencies = TRUE)
install.packages('nloptr', dependencies = TRUE)
install.packages('quadprog', dependencies = TRUE)
install.packages('RiskPortfolios', dependencies = TRUE)
install.packages('cccp', dependencies = TRUE)
install.packages('timetk', dependencies = TRUE)
install.packages('broom', dependencies = TRUE)
install.packages('stargazer', dependencies = TRUE)
library(stringr)
library(dplyr)
library(data.table)
src_dir <- c('/Users/osangjin/Desktop/past2/past/Recommendation-system/data')
src_file <- list.files(src_dir)
file_name <- paste0(src_dir, '/', src_file[1])
user_id <- as.numeric(str_extract(src_file[1], '\\d+'))
df <- fread(file_name, sep=',', encoding="UTF-8")
df_name <- paste('df',user_id, sep='')
id_lst <- c()
id_lst[1] <- user_id
View(df)
df <- df[, -1]
assign(df_name, df)
src_file_cnt <- length(src_file)
src_file_cnt
id_lst <- c()
for(i in 1:src_file_cnt) {
file_name <- paste0(src_dir, '/', src_file[i])
user_id <- as.numeric(str_extract(src_file[i], '\\d+'))
df <- fread(file_name, sep=',', encoding="UTF-8")
df_name <- paste('df',user_id, sep='')
id_lst[i] <- user_id
df <- df[, -1]
assign(df_name, df)
}
list_df_data <- mget(ls(pattern = "^df\\d+"))
save(list_df_data, file="list_df_data.RData")
A <- list_df_data[[1]]
colnames(A) <- c("title", 1)
merge_df <- A
View(merge_df)
i = 2
repeat{
if(i>src_file_cnt-1) break
B <- list_df_data[[i]]
colnames(B) <- c("title", i)
merge_df <- merge(x=merge_df, y=B, by='title', all=TRUE)
i <- i+1
}
restaurant_lst <- as.vector(merge_df[,1])
restaurant_lst
user_item <- merge_df[,-1]
colnames(user_item) <- paste("u", 1:ncol(user_item), sep='')
View(user_item)
user_item <- t(user_item)
colnames(user_item) <- paste("i", 1:ncol(user_item), sep='')
user_item <- t(user_item)
user_item <- user_item[which(rowSums(!is.na(user_item)) > 3),]
View(user_item)
pearsonCor <- function(x, y){
x_mean <- mean(x, na.rm = T)
y_mean <- mean(y, na.rm = T)
idx <- !is.na(x) & !is.na(y)
if(sum(idx) == 0) return(NA)
x_new <- x[idx]
y_new <- y[idx]
sum((x_new- x_mean) * (y_new-y_mean)) /
sqrt( sum( (x_new - x_mean)**2) * sum( (y_new-y_mean) **2) )
}
u_dist<-function(u, v){
sqrt(sum((u -v) **2))
}
m <- matrix(sample(c(as.numeric(0:5), NA), 50,
replace=TRUE, prob=c(rep(.4/6,6),.6)), ncol=10,
dimnames=list(user=paste("u", 1:5, sep=""),
item=paste("i", 1:10, sep="")))
View(m)
u <-m['u5',]
u
sim <- apply(m, 1, function(x) {
pearsonCor(u, x) })
sim
library(doBy)
k=2
k_neighbors <- setdiff(which.maxn(sim, k+1), 5)
k_neighbors
k_recommend <- apply(m[k_neighbors,], 2, function(x) { mean(x, na.rm = T)})
k_recommend
k_recommend_final <- k_recommend[is.na(u)]
sort(k_recommend_final, decreasing = T)
# install.packages("proxy")
library(proxy)
View(user_item)
user_item_t <- t(user_item)
cor(user_item_t, y = NULL, use ="everything", method = c("pearson"))
# x, y 두column 사이만이 아니라, x에 다 넣어서 할 수도 있다. use는 columnuse = 결측치 처리 (NA포함이면 NA처리), 지금은 NA가 너무 많아서 잘 안됨.
user_similarity <- as.matrix(dist(user_item_t, method = "euclidean")) # cosine, euclidean
item_similarity <- as.matrix(dist(user_item, method = "cosine"))
head(user_similarity)
head(item_similarity)
### Kmeans
# user_item (kmeans)
View(user_item_t)
user_item_t <- t(user_item)
user_item_t[is.na(user_item_t)] <- 0
clusterKmeans <- kmeans(user_item_t, centers = 5, iter.max = 100)
summary(clusterKmeans)
clusterKmeans$cluster
# hungry_eun_tae (kmeans)
# df <- read.csv("hungry_eun_tae.csv")
df <- fread("hungry_eun_tae.csv", sep=',', encoding='UTF-8')
View(df)
df_t <- t(df)
df_t <- df_t[-1,]
View(df_t)
colnames(df_t) <- paste("i", 1:ncol(df_t), sep='')
df_t <- as.data.frame(df_t)
str(df_t)
df_t[,c(1:ncol(df_t))] <- as.double(unlist(df_t[,c(1:ncol(df_t))]))
clusterKmeans <- kmeans(df_t, centers = 3, iter.max = 1000)
clusterKmeans$cluster
### Hierarchical clustering
d <- dist(df_t, method="euclidean")
d
pfit <- hclust(d, method="ward.D")
View(df_t)
df_t$user <- c(rownames(df_t))
plot(pfit, labels=df_t$user)
### DBSCAN
# install.packages("fpc")
# install.packages("dbscan")
library(fpc)
library(dbscan)
library(ggplot2)
n <- 100
x <- cbind(
x = runif(5, 0, 5) + rnorm(n, sd = 0.2),
y = runif(5, 0, 5) + rnorm(n, sd = 0.2)
)
x
res <- dbscan(x, eps = .3, minPts = 3)
res
plot(x, col=res$cluster)
hullplot(x, res)
### Kmeans
# user_item (kmeans)
View(user_item_t)
user_item_t[is.na(user_item_t)] <- 0
View(user_item_t)
clusterKmeans <- kmeans(user_item_t, centers = 5, iter.max = 100)
clusterKmeans$cluster
# hungry_eun_tae (kmeans)
# df <- read.csv("hungry_eun_tae.csv")
df <- fread("hungry_eun_tae.csv", sep=',', encoding='UTF-8')
setwd("~/Desktop/past2/past/Recommendation-system/source/finish_version")
# hungry_eun_tae (kmeans)
# df <- read.csv("hungry_eun_tae.csv")
df <- fread("hungry_eun_tae.csv", sep=',', encoding='UTF-8')
View(df)
df_t <- t(df)
df_t <- df_t[-1,]
colnames(df_t) <- paste("i", 1:ncol(df_t), sep='')
df_t <- as.data.frame(df_t)
str(df_t)
source('~/Desktop/past2/past/Recommendation-system/source/finish_version/04clustering.R', echo=TRUE)
clusterKmeans <- kmeans(df_t, centers = 3, iter.max = 1000)
df_t[,c(1:ncol(df_t))] <- as.double(unlist(df_t[,c(1:ncol(df_t))]))
clusterKmeans <- kmeans(df_t, centers = 3, iter.max = 1000)
str(df_t)
df_t[,c(1:ncol(df_t))] <- as.double(unlist(df_t[,c(1:ncol(df_t))]))
clusterKmeans <- kmeans(df_t, centers = 3, iter.max = 1000)
View(df_t)
class(df_t)
clusterKmeans <- kmeans(df_t, centers = 3, iter.max = 1000)
View(df_t)
class(user_item_t)
clusterKmeans <- kmeans(as(df_t, "matrix"), centers = 3, iter.max = 1000)
clusterKmeans <- kmeans(as(df_t, "matrix"), centers = 3, iter.max = 1000)
clusterKmeans <- kmeans(as.matrix(df_t), centers = 3, iter.max = 1000)
clusterKmeans <- kmeans(df_t, centers = 3, iter.max = 1000)
# hungry_eun_tae (kmeans)
# df <- read.csv("hungry_eun_tae.csv")
df <- fread("hungry_eun_tae.csv", sep=',', encoding='UTF-8')
df_t <- t(df)
df_t <- df_t[-1,]
colnames(df_t) <- paste("i", 1:ncol(df_t), sep='')
df_t[,c(1:ncol(df_t))] <- as.double(unlist(df_t[,c(1:ncol(df_t))]))
clusterKmeans <- kmeans(df_t, centers = 3, iter.max = 100)
str(df_t)
clusterKmeans$cluster
### Hierarchical clustering
d <- dist(df_t, method="euclidean")
# hungry_eun_tae (kmeans)
# df <- read.csv("hungry_eun_tae.csv")
df <- fread("hungry_eun_tae.csv", sep=',', encoding='UTF-8')
df_t <- t(df)
df_t <- df_t[-1,]
colnames(df_t) <- paste("i", 1:ncol(df_t), sep='')
df_t[,c(1:ncol(df_t))] <- as.double(unlist(df_t[,c(1:ncol(df_t))]))
### Hierarchical clustering
d <- dist(df_t, method="euclidean")
class(df_t)
# hungry_eun_tae (kmeans)
# df <- read.csv("hungry_eun_tae.csv")
df <- fread("hungry_eun_tae.csv", sep=',', encoding='UTF-8')
df_t <- t(df)
df_t <- df_t[-1,]
colnames(df_t) <- paste("i", 1:ncol(df_t), sep='')
df_t <- as.data.frame(df_t)
str(df_t)
df_t[,c(1:ncol(df_t))] <- as.double(unlist(df_t[,c(1:ncol(df_t))]))
str(df_t)
clusterKmeans <- kmeans(df_t, centers = 3, iter.max = 100)
clusterKmeans$cluster
### Hierarchical clustering
d <- dist(df_t, method="euclidean")
d
pfit <- hclust(d, method="ward.D")
View(df_t)
df_t$user <- c(rownames(df_t))
plot(pfit, labels=df_t$user)
### DBSCAN
# install.packages("fpc")
# install.packages("dbscan")
library(fpc)
library(dbscan)
library(ggplot2)
n <- 100
x <- cbind(
x = runif(5, 0, 5) + rnorm(n, sd = 0.2),
y = runif(5, 0, 5) + rnorm(n, sd = 0.2)
)
x
res <- dbscan(x, eps = .3, minPts = 3)
res
plot(x, col=res$cluster)
hullplot(x, res)
# install.packages(c("recommenderlab", "tibble"))
library(recommenderlab)
library(dplyr)
library(tidyr)
library(tibble)
View(user_item)  # row:items, col:users
class(user_item) # matrix
rating <- as(user_item, "realRatingMatrix")
identical(as(rating, "matrix"), user_item)
rating_lst <- as(rating, "list")
rating_lst
r_m <- normalize(rating)
r_d <- denormalize(r_m)
image(rating, main = "Raw Ratings")
image(r_m, main = "Normalized Ratings")
r_b <- binarize(rating, minRating=4)  # binary case
binary <- as(r_b, "matrix")
View(binary)
# recommender class start
rating <- as(user_item, "realRatingMatrix")
class(rating)
nrow(rating)
r <- Recommender(rating[1:45], method = "UBCF") # POPULAR, UBCF
r
getModel(r)$description
recom <- predict(r, rating[46], n=15, type="topNList")
recom
as(recom, "list")
recom3 <- bestN(recom, n = 3)
recom3
as(recom3, "list")
# user_item_t
user_item_t <- t(user_item)
rating <- as(user_item_t, "realRatingMatrix")
class(rating)
nrow(rating)
r <- Recommender(rating[1:117], method = "UBCF") # POPULAR, UBCF
r
getModel(r)$description
recom <- predict(r, rating[118], n=15, type="topNList")
oritin <- user_item_t
origin <- origin[which(rowSums(!is.na(origin)) > 5),]
origin <- user_item_t
origin <- origin[which(rowSums(!is.na(origin)) > 5),]
rating <- as(origin, "realRatingMatrix")
nrow(rating)
r <- Recommender(rating[1:15], method = "UBCF") # POPULAR, UBCF
r
recom <- predict(r, rating[16], n=15, type="topNList")
as(recom, "list")
recom3 <- bestN(recom, n = 3)
r <- Recommender(rating[1:13], method = "UBCF") # POPULAR, UBCF
r
recom <- predict(r, rating[14], n=15, type="topNList")
as(recom, "list")
recom3 <- bestN(recom, n = 3)
recom3
as(recom3, "list")
### 직접!
df <- read.csv("hungry_eun_tae.csv")
df_t <- t(df)
df_t <- df_t[-1,]
colnames(df_t) <- paste("i", 1:ncol(df_t), sep='')
class(df_t$i1)
colnames(df_t) <- paste("i", 1:ncol(df_t), sep='')
class(df_t$i1)
### 직접!
df <- read.csv("hungry_eun_tae.csv")
df_t <- t(df)
df_t <- df_t[-1,]
colnames(df_t) <- paste("i", 1:ncol(df_t), sep='')
class(df_t$i1)
str(df_t$i1)
View(df_t)
df_t <- as.data.frame(df_t)
str(df_t)
df_t[,c(1:ncol(df_t))] <- as.double(unlist(df_t[,c(1:ncol(df_t))]))
df_t[which(df_t == 0, arr.ind = TRUE)] <- NA
str(df_t)
user_item_ratings <- as.matrix(df_t)
rating <- as(user_item_ratings, "realRatingMatrix")
# recommenderRegistry$get_entries(dataType = "realRatingMatrix")
nrow(rating)
class(rating)
# Recommender(data, method)
r <- Recommender(rating[1:9], method = "UBCF")
r
names(getModel(r))
getModel(r)$description
recom <- predict(r, rating[10], n=5, type="topNList")
recom
t <- as(recom, "list")
recom3 <- bestN(recom, n = 3)
recom3
as(recom3, "list")
library(stringr)
library(dplyr)
library(data.table)
src_dir <- c('/Users/osangjin/Desktop/past2/past/Recommendation-system/data')
src_file <- list.files(src_dir)
file_name <- paste0(src_dir, '/', src_file[1])
user_id <- as.numeric(str_extract(src_file[1], '\\d+'))
df <- fread(file_name, sep=',', encoding="UTF-8")
df_name <- paste('df',user_id, sep='')
id_lst <- c()
id_lst[1] <- user_id
View(df)
df <- df[, -1]
assign(df_name, df)
src_file_cnt <- length(src_file)
src_file_cnt
id_lst <- c()
for(i in 1:src_file_cnt) {
file_name <- paste0(src_dir, '/', src_file[i])
user_id <- as.numeric(str_extract(src_file[i], '\\d+'))
df <- fread(file_name, sep=',', encoding="UTF-8")
df_name <- paste('df',user_id, sep='')
id_lst[i] <- user_id
df <- df[, -1]
assign(df_name, df)
}
list_df_data <- mget(ls(pattern = "^df\\d+"))
save(list_df_data, file="list_df_data.RData")
A <- list_df_data[[1]]
colnames(A) <- c("title", 1)
merge_df <- A
View(merge_df)
i = 2
repeat{
if(i>src_file_cnt-1) break
B <- list_df_data[[i]]
colnames(B) <- c("title", i)
merge_df <- merge(x=merge_df, y=B, by='title', all=TRUE)
i <- i+1
}
restaurant_lst <- as.vector(merge_df[,1])
restaurant_lst
user_item <- merge_df[,-1]
colnames(user_item) <- paste("u", 1:ncol(user_item), sep='')
View(user_item)
user_item <- t(user_item)
colnames(user_item) <- paste("i", 1:ncol(user_item), sep='')
user_item <- t(user_item)
user_item <- user_item[which(rowSums(!is.na(user_item)) > 3),]
View(user_item)
save(user_item, file="user_item.RData")
