str(tt)
tt[1,]
pearsonCor <- function(x, y){
x_mean <- mean(x, na.rm = T)
y_mean <- mean(y, na.rm = T)
idx <- !is.na(x) & !is.na(y)
if(sum(idx) == 0) return(NA)
x_new <- x[idx]
y_new <- y[idx]
sum((x_new- x_mean) * (y_new-y_mean)) /
sqrt( sum( (x_new - x_mean)**2) * sum( (y_new-y_mean) **2) )
}
u <-tt[8,]
u
sim <- apply(tt, 1, function(x) {
pearsonCor(u, x) })
sim
library(doBy)
k=2
k_neighbors <- setdiff(which.maxn(sim, k+1), 1)
k_neighbors
k_recommend <- apply(tt[k_neighbors,], 2, function(x) { mean(x, na.rm = T)})
k_recommend
k_recommend_final <- k_recommend[is.na(u)]
sort(k_recommend_final, decreasing = T)
k_recommend
library(recommenderlab)
library(dplyr)
library(tidyr)
library(tibble)
user_item_ratings <- as.matrix(tt)
rating <- as(user_item_ratings, "realRatingMatrix")
recommenderRegistry$get_entries(dataType = "realRatingMatrix")
nrow(rating)
class(rating)
# Recommender(data, method)
r <- Recommender(rating[1:40], method = "IBCF")
r
names(getModel(r))
getModel(r)$description
recom <- predict(r, rating[41:43], n=15, type="topNList")
recom
t <- as(recom, "list")
recom3 <- bestN(recom, n = 3)
recom3
as(recom3, "list")
library(recommenderlab)
library(dplyr)
library(tidyr)
library(tibble)
user_item_ratings <- as.matrix(tt)
rating <- as(user_item_ratings, "realRatingMatrix")
recommenderRegistry$get_entries(dataType = "realRatingMatrix")
nrow(rating)
class(rating)
head(tating)
head(rating)
head(user_item_ratings)
View(user_item_ratings)
user_item_ratings <- t(as.matrix(tt))
rating <- as(user_item_ratings, "realRatingMatrix")
recommenderRegistry$get_entries(dataType = "realRatingMatrix")
nrow(rating)
class(rating)
# Recommender(data, method)
r <- Recommender(rating[1:40], method = "IBCF")
# Recommender(data, method)
r <- Recommender(rating[1:7], method = "IBCF")
r
names(getModel(r))
getModel(r)$description
recom <- predict(r, rating[8], n=5, type="topNList")
recom
t <- as(recom, "list")
recom3 <- bestN(recom, n = 3)
recom3
as(recom3, "list")
user_item_ratings <- as.matrix(tt)
rating <- as(user_item_ratings, "realRatingMatrix")
recommenderRegistry$get_entries(dataType = "realRatingMatrix")
nrow(rating)
class(rating)
# Recommender(data, method)
r <- Recommender(rating[1:7], method = "IBCF")
r
names(getModel(r))
getModel(r)$description
recom <- predict(r, rating[8], n=5, type="topNList")
recom
t <- as(recom, "list")
recom3 <- bestN(recom, n = 3)
recom3
as(recom3, "list")
library(recommenderlab)
library(dplyr)
library(tidyr)
library(tibble)
user_item_ratings <- as.matrix(user_item)
rating <- as(user_item_ratings, "realRatingMatrix")
recommenderRegistry$get_entries(dataType = "realRatingMatrix")
View(user_item)
recommenderRegistry$get_entries(dataType = "realRatingMatrix")
nrow(rating)
class(rating)
# Recommender(data, method)
r <- Recommender(rating[1:40], method = "IBCF")
r
names(getModel(r))
getModel(r)$description
recom <- predict(r, rating[41:43], n=15, type="topNList")
recom
t <- as(recom, "list")
recom3 <- bestN(recom, n = 3)
recom3
as(recom3, "list")
library(recommenderlab)
library(dplyr)
library(tidyr)
library(tibble)
user_item_ratings <- t(as.matrix(user_item))
rating <- as(user_item_ratings, "realRatingMatrix")
recommenderRegistry$get_entries(dataType = "realRatingMatrix")
nrow(rating)
class(rating)
# Recommender(data, method)
r <- Recommender(rating[1:40], method = "IBCF")
r
names(getModel(r))
getModel(r)$description
recom <- predict(r, rating[41:43], n=15, type="topNList")
recom
t <- as(recom, "list")
recom3 <- bestN(recom, n = 3)
recom3
as(recom3, "list")
user_item_ratings <- t(as.matrix(user_item))
rating <- as(user_item_ratings, "realRatingMatrix")
recommenderRegistry$get_entries(dataType = "realRatingMatrix")
nrow(rating)
class(rating)
# Recommender(data, method)
r <- Recommender(rating[1:40], method = "UBCF")
r
names(getModel(r))
getModel(r)$description
recom <- predict(r, rating[41:43], n=15, type="topNList")
recom
t <- as(recom, "list")
recom3 <- bestN(recom, n = 3)
recom3
as(recom3, "list")
user_item_ratings <- t(as.matrix(user_item))
rating <- as(user_item_ratings, "realRatingMatrix")
recommenderRegistry$get_entries(dataType = "realRatingMatrix")
nrow(rating)
class(rating)
# Recommender(data, method)
r <- Recommender(rating[1:40], method = "POPULAR")
r
names(getModel(r))
getModel(r)$description
recom <- predict(r, rating[41:43], n=15, type="topNList")
recom
t <- as(recom, "list")
recom3 <- bestN(recom, n = 3)
recom3
as(recom3, "list")
df <- read.csv("pohang.csv")
m <- df[, -11]
m <- t(m)
colnames(m) <- m[1,]
m <- m[-1,]
class(m)
tt <- as.data.frame(m)
tt <- apply(tt, 1, function(x){as.double(unlist(x))})
tt <- as.data.frame(m)
tt <- apply(tt, 2, function(x){as.double(unlist(x))})
class(tt)
tt <- as.data.frame(m)
tt <- sapply(tt, function(x) {as.double(unlist(x))} )
class(tt)
tt <- apply(tt, 2, function(x){as.double(unlist(x))})
class(tt)
tt <- as.data.frame(m)
tt <- apply(tt, 2, function(x){as.double(unlist(x))})
class(tt)
tt <- as.data.frame(m)
pearsonCor <- function(x, y){
x_mean <- mean(x, na.rm = T)
y_mean <- mean(y, na.rm = T)
idx <- !is.na(x) & !is.na(y)
if(sum(idx) == 0) return(NA)
x_new <- x[idx]
y_new <- y[idx]
sum((x_new- x_mean) * (y_new-y_mean)) /
sqrt( sum( (x_new - x_mean)**2) * sum( (y_new-y_mean) **2) )
}
u <-tt[8,]
u
sim <- apply(tt, 1, function(x) {
pearsonCor(u, x) })
sim
u <-tt[8,]
u
sim <- apply(tt, 1, function(x) {
pearsonCor(u, x) })
sim
str(tt)
tt <- as.data.frame(m)
tt <- apply(tt, 1, function(x){as.double(unlist(x))})
class(tt)
str(tt)
tt <- as.data.frame(m)
str(tt)
colnames(m) <- c(paste("i",1:ncol(m),sep=""))
m <- m[-1,]
class(m)
m
df <- read.csv("pohang.csv")
m <- df[, -11]
m <- t(m)
colnames(m) <- c(paste("i",1:ncol(m),sep=""))
class(m)
View(m)
df <- read.csv("pohang.csv")
m <- df[, -11]
m <- t(m)
colnames(m) <- c(paste("i",1:ncol(m),))
m <- m[-1,]
class(m)
View(m)
df <- read.csv("pohang.csv")
m <- df[, -11]
m <- t(m)
m <- m[-1,]
colnames(m) <- c(paste("i",1:ncol(m),))
class(m)
View(m)
colnames(m) <- c(paste("i",1:ncol(m),))
colnames(m) <- paste("i", 1:ncol(user_item), sep='')
df <- read.csv("pohang.csv")
m <- df[, -11]
m <- t(m)
m <- m[-1,]
colnames(m) <- paste("i", 1:ncol(m), sep='')
class(m)
View(m)
df <- read.csv("pohang.csv")
m <- df[, -11]
m <- t(m)
restaurant_lst <- as.vector(m[1,])
colnames(m) <- paste("i", 1:ncol(m), sep='')
class(m)
View(m)
restaurant_lst
df <- read.csv("pohang.csv")
m <- df[, -11]
m <- t(m)
restaurant_lst <- as.vector(m[1,])
m <- m[-1,]
colnames(m) <- paste("i", 1:ncol(m), sep='')
class(m)
View(m)
restaurant_lst
tt <- m
str(tt)
tt <- as.data.frame(m)
str(tt)
tt[1]
tt <- apply(tt, 1, as.double)
str(tt)
tt <- as.data.frame(m)
tt <- apply(tt, 1, function(x){as.double(x)})
str(tt)
tt <- as.data.frame(m)
tt <- apply(tt, 1, function(x){as.double(unlist(x))})
str(tt)
tt <- as.data.frame(m)
tt[:]
tt[,c(1:ncol(tt))] <- as.double(tt[,c(1:ncol(tt))])
tt <- as.data.frame(m)
tt[,c(1:ncol(tt))] <- as.double(tt[,c(1:ncol(tt))])
df <- read.csv("pohang.csv")
m <- df[, -11]
m <- t(m)
m <- m[-1,]
colnames(m) <- paste("i", 1:ncol(m), sep='')
class(m)
tt[,c(1:ncol(tt))] <- as.double(tt[,c(1:ncol(tt))])
tt[,c(1:ncol(tt))] <- as.double(unlist(tt[,c(1:ncol(tt))]))
str(tt)
pearsonCor <- function(x, y){
x_mean <- mean(x, na.rm = T)
y_mean <- mean(y, na.rm = T)
idx <- !is.na(x) & !is.na(y)
if(sum(idx) == 0) return(NA)
x_new <- x[idx]
y_new <- y[idx]
sum((x_new- x_mean) * (y_new-y_mean)) /
sqrt( sum( (x_new - x_mean)**2) * sum( (y_new-y_mean) **2) )
}
u <-tt[8,]
u
sim <- apply(tt, 1, function(x) {
pearsonCor(u, x) })
which(tt==0)
tt[which(tt==0)] <- NA
tt[which(tt==0)]
test <- apply(tt, 1, function(x){x[which(x==0)] <- NA})
View(test)
test <- apply(tt, 2, function(x){x[which(x==0)] <- NA})
View(test)
tt[which(tt$i1==0)]
tt[which(tt$i1==0),]
tt[which(tt==0),]
test <- apply(tt, 1, function(x){x[which(x==0),] <- NA})
which(tt == 0, arr.ind = TRUE)
tt[which(tt == 0, arr.ind = TRUE)]
tt[which(tt == 0, arr.ind = TRUE)] <- 1000
df <- read.csv("pohang.csv")
m <- df[, -11]
m <- t(m)
m <- m[-1,]
colnames(m) <- paste("i", 1:ncol(m), sep='')
class(m)
View(m)
tt <- as.data.frame(m)
tt[,c(1:ncol(tt))] <- as.double(unlist(tt[,c(1:ncol(tt))]))
str(tt)
tt[which(tt == 0, arr.ind = TRUE)] <- NA
pearsonCor <- function(x, y){
x_mean <- mean(x, na.rm = T)
y_mean <- mean(y, na.rm = T)
idx <- !is.na(x) & !is.na(y)
if(sum(idx) == 0) return(NA)
x_new <- x[idx]
y_new <- y[idx]
sum((x_new- x_mean) * (y_new-y_mean)) /
sqrt( sum( (x_new - x_mean)**2) * sum( (y_new-y_mean) **2) )
}
u <-tt[8,]
u
sim <- apply(tt, 1, function(x) {
pearsonCor(u, x) })
str(tt)
tt[,c(1:ncol(tt))] <- as.double(unlist(tt[,c(1:ncol(tt))]))
pearsonCor <- function(x, y){
x_mean <- mean(x, na.rm = T)
y_mean <- mean(y, na.rm = T)
idx <- !is.na(x) & !is.na(y)
if(sum(idx) == 0) return(NA)
x_new <- x[idx]
y_new <- y[idx]
sum((x_new- x_mean) * (y_new-y_mean)) /
sqrt( sum( (x_new - x_mean)**2) * sum( (y_new-y_mean) **2) )
}
u <-tt[8,]
u
sim <- apply(tt, 1, function(x) {
pearsonCor(u, x) })
library(recommenderlab)
library(dplyr)
library(tidyr)
library(tibble)
user_item_ratings <- as.matrix(tt)
rating <- as(user_item_ratings, "realRatingMatrix")
recommenderRegistry$get_entries(dataType = "realRatingMatrix")
nrow(rating)
class(rating)
# Recommender(data, method)
r <- Recommender(rating[1:7], method = "IBCF")
r
names(getModel(r))
getModel(r)$description
recom <- predict(r, rating[8], n=5, type="topNList")
recom
t <- as(recom, "list")
recom3 <- bestN(recom, n = 3)
recom3
as(recom3, "list")
df <- read.csv("pohang.csv")
m <- df[, -12]
m <- t(m)
m <- m[-1,]
colnames(m) <- paste("i", 1:ncol(m), sep='')
class(m)
View(m)
tt <- as.data.frame(m)
tt[,c(1:ncol(tt))] <- as.double(unlist(tt[,c(1:ncol(tt))]))
str(tt)
tt[which(tt == 0, arr.ind = TRUE)] <- NA
df <- read.csv("pohang.csv")
m <- df[, -12]
m <- t(m)
m <- m[-1,]
colnames(m) <- paste("i", 1:ncol(m), sep='')
class(m)
View(m)
tt <- as.data.frame(m)
tt[,c(1:ncol(tt))] <- as.double(unlist(tt[,c(1:ncol(tt))]))
str(tt)
tt[which(tt == 0, arr.ind = TRUE)] <- NA
###
df <- read.csv("pohang.csv")
m <- df[, -12]
m <- t(m)
m <- m[-1,]
colnames(m) <- paste("i", 1:ncol(m), sep='')
class(m)
View(tt)
tt <- as.data.frame(m)
tt[,c(1:ncol(tt))] <- as.double(unlist(tt[,c(1:ncol(tt))]))
str(tt)
tt[which(tt == 0, arr.ind = TRUE)] <- NA
###
###
library(recommenderlab)
library(dplyr)
library(tidyr)
library(tibble)
user_item_ratings <- as.matrix(tt)
rating <- as(user_item_ratings, "realRatingMatrix")
recommenderRegistry$get_entries(dataType = "realRatingMatrix")
nrow(rating)
class(rating)
# Recommender(data, method)
r <- Recommender(rating[1:9], method = "IBCF")
r
names(getModel(r))
getModel(r)$description
recom <- predict(r, rating[10], n=5, type="topNList")
recom
t <- as(recom, "list")
recom3 <- bestN(recom, n = 3)
recom3
as(recom3, "list")
df <- read.csv("pohang.csv")
m <- df[, -12]
m <- t(m)
m <- m[-1,]
colnames(m) <- paste("i", 1:ncol(m), sep='')
class(m)
View(tt)
tt <- as.data.frame(m)
tt[,c(1:ncol(tt))] <- as.double(unlist(tt[,c(1:ncol(tt))]))
str(tt)
tt[which(tt == 0, arr.ind = TRUE)] <- NA
###
library(recommenderlab)
library(dplyr)
library(tidyr)
library(tibble)
user_item_ratings <- as.matrix(tt)
rating <- as(user_item_ratings, "realRatingMatrix")
recommenderRegistry$get_entries(dataType = "realRatingMatrix")
nrow(rating)
class(rating)
# Recommender(data, method)
r <- Recommender(rating[1:9], method = "UBCF")
r
names(getModel(r))
getModel(r)$description
recom <- predict(r, rating[10], n=5, type="topNList")
recom
t <- as(recom, "list")
recom3 <- bestN(recom, n = 3)
recom3
as(recom3, "list")
df <- read.csv("pohang.csv")
m <- df[, -12]
m <- t(m)
m <- m[-1,]
colnames(m) <- paste("i", 1:ncol(m), sep='')
class(m)
View(tt)
tt <- as.data.frame(m)
tt[,c(1:ncol(tt))] <- as.double(unlist(tt[,c(1:ncol(tt))]))
str(tt)
tt[which(tt == 0, arr.ind = TRUE)] <- NA
###
library(recommenderlab)
library(dplyr)
library(tidyr)
library(tibble)
user_item_ratings <- as.matrix(tt)
rating <- as(user_item_ratings, "realRatingMatrix")
recommenderRegistry$get_entries(dataType = "realRatingMatrix")
nrow(rating)
class(rating)
# Recommender(data, method)
r <- Recommender(rating[1:9], method = "UBCF")
r
names(getModel(r))
getModel(r)$description
recom <- predict(r, rating[10], n=5, type="topNList")
recom
t <- as(recom, "list")
recom3 <- bestN(recom, n = 3)
recom3
as(recom3, "list")
# Recommender(data, method)
r <- Recommender(rating[1:9], method = "IBCF")
r
names(getModel(r))
getModel(r)$description
recom <- predict(r, rating[10], n=5, type="topNList")
recom
t <- as(recom, "list")
recom3 <- bestN(recom, n = 3)
recom3
as(recom3, "list")
setwd("~/Desktop/past/Recommendation-system/source/recommend/Testing")
