# nn <- structure(list(ids = list(c(2,3), c(1,3), c(1,2,3), c(3,5), c(4,5)), eps = 1),
#                 class =  c("NN", "frNN"))
# nn
# dbscan(nn, minPts = 2)
clear
cat("\014")
library(stringr)
library(dplyr)
src_dir <- c('/Users/osangjin/Desktop/past/Recommendation-system/data')
src_file <- list.files(src_dir) # list
src_file_cnt <- length(src_file)
src_file_cnt
id_lst <- c()
for(i in 1:src_file_cnt) {
file_name <- gsub(pattern=' ', replacement = '', paste(src_dir, '/', src_file[i]))
user_id <- as.numeric(str_extract(src_file[i], '\\d+'))
df <- read.csv(file_name)
df_name <- paste('df',user_id, sep='')
id_lst[i] <- user_id
df <- df[, -1]
assign(df_name, df)
}
list_df_data <- mget(ls(pattern = "^df\\d+"))
check_df <- function(df, i){
df_type <- class(df[[i]])
if (df_type[1] != "data.frame") {
df[[2]] <- as.data.frame(df[[2]])
df[[2]] <- t(df[[2]])
df[[2]][,2] <- as.numeric(df[[2]][,2])
}
return (df[[i]])
}
A <- list_df_data[[1]]
colnames(A) <- c("title", 1)
merge_df <- A
i = 2
repeat{
if(i>src_file_cnt-1) break
B <- check_df(list_df_data,i)
colnames(B) <- c("title", i)
merge_df <- merge(x=merge_df, y=B, by='title', all=TRUE)
i <- i+1
}
View(merge_df)
restaurant_lst <- as.vector(merge_df[,1])
user_item <- merge_df[,-1]
rownames(user_item) <- paste("i", 1:nrow(user_item), sep='')
colnames(user_item) <- paste("u", 1:ncol(user_item), sep='')
View(user_item)
restaurant_lst
library(recommenderlab)
library(dplyr)
library(tidyr)
library(tibble)
user_item_ratings <- t(as.matrix(user_item))
rating <- as(user_item_ratings, "realRatingMatrix")
recommenderRegistry$get_entries(dataType = "realRatingMatrix")
r <- Recommender(rating[1:100], method = "IBCF")
r
names(getModel(r))
getModel(r)$topN
recom <- predict(r, rating[101:105], n=12)
recom
t <- as(recom, "list")
recom3 <- bestN(recom, n = 3)
recom3
as(recom3, "list")
# k-means, Centroid-based clustering
library(ggplot2)
library(tidyr)
library(dplyr)
set.seed(2018)
synth.data <- data.frame(x1 =c(rnorm(20, 3, 1.5), rnorm(20,0,1), rnorm(20,5,1)),
x2 =c(rnorm(20, 0, 1), rnorm(20,4,1), rnorm(20,5,1)))
ndata <- nrow(synth.data)
ndim <- ncol(synth.data)
synth.data %>%
ggplot(aes(x =x1, y=x2)) +
geom_point(shape =1) +
theme_bw()
u_dist<-function(u, v){
sqrt(sum((u -v) **2))
}
k <-3
cents <-data.frame(cl =1:k)
cents <-cbind(cents, synth.data[sample(1:60, k),])
synth.data$cl <- factor(rep(1, ndata), levels =1:k)
synth.data %>% ggplot(aes(x =x1, y=x2, col =as.factor(cl))) +
geom_point(shape =1) +
theme_bw() +
geom_point(data =cents, shape =4, col ='red')
set.seed(NULL)
k <-3
cents <-data.frame(cl =1:k)
cents <-cbind(cents, synth.data[sample(1:60, k),])
k1 <- apply(synth.data[,1:2], 1, function(x){u_dist(x, cents[1,2:3])})
k2 <- apply(synth.data[,1:2], 1, function(x){u_dist(x, cents[2,2:3])})
k3 <- apply(synth.data[,1:2], 1, function(x){u_dist(x, cents[3,2:3])})
a <- rbind(k1,k2)
a <- rbind(a,k3)
synth.data[,3] <- apply(a, 2, which.min)
as.factor(synth.data$cl)
cents <- synth.data %>%
group_by(cl) %>%
summarise(x1=mean(x1),
x2=mean(x2))
synth.data %>% ggplot(aes(x =x1, y=x2, col =as.factor(cl))) +
geom_point(shape =1) +
theme_bw() +
geom_point(data =cents, shape =4, col ='red')
set.seed(NULL)
k <-3
cents <-data.frame(cl =1:k)
cents <-cbind(cents, synth.data[sample(1:60, k),])
k1 <- apply(synth.data[,1:2], 1, function(x){u_dist(x, cents[1,2:3])})
k2 <- apply(synth.data[,1:2], 1, function(x){u_dist(x, cents[2,2:3])})
k3 <- apply(synth.data[,1:2], 1, function(x){u_dist(x, cents[3,2:3])})
a <- rbind(k1,k2)
a <- rbind(a,k3)
synth.data[,3] <- apply(a, 2, which.min)
as.factor(synth.data$cl)
cents <- synth.data %>%
group_by(cl) %>%
summarise(x1=mean(x1),
x2=mean(x2))
synth.data %>% ggplot(aes(x =x1, y=x2, col =as.factor(cl))) +
geom_point(shape =1) +
theme_bw() +
geom_point(data =cents, shape =4, col ='red')
data(iris)
iris <- as.matrix(iris[,1:4])
## find suitable eps parameter using a k-NN plot for k = dim + 1
## Look for the knee!
kNNdistplot(iris, k = 5)
abline(h=.5, col = "red", lty=2)
res <- dbscan(iris, eps = .5, minPts = 5)
res
pairs(iris, col = res$cluster + 1L)
## use precomputed frNN
fr <- frNN(iris, eps = .5)
dbscan(fr, minPts = 5)
## Example 2: use data from fpc
set.seed(665544)
n <- 100
x <- cbind(
x = runif(10, 0, 10) + rnorm(n, sd = 0.2),
y = runif(10, 0, 10) + rnorm(n, sd = 0.2)
)
res <- dbscan(x, eps = .3, minPts = 3)
res
## plot clusters and add noise (cluster 0) as crosses.
plot(x, col=res$cluster)
points(x[res$cluster==0,], pch = 3, col = "grey")
hullplot(x, res)
## predict cluster membership for new data points
## (Note: 0 means it is predicted as noise)
newdata <- x[1:5,] + rnorm(10, 0, .2)
predict(res, newdata, data = x)
## compare speed against fpc version (if microbenchmark is installed)
## Note: we use dbscan::dbscan to make sure that we do now run the
## implementation in fpc.
# }
# NOT RUN {
# if (requireNamespace("fpc", quietly = TRUE) &&
#     requireNamespace("microbenchmark", quietly = TRUE)) {
#   t_dbscan <- microbenchmark::microbenchmark(
#     dbscan::dbscan(x, .3, 3), times = 10, unit = "ms")
#   t_dbscan_linear <- microbenchmark::microbenchmark(
#     dbscan::dbscan(x, .3, 3, search = "linear"), times = 10, unit = "ms")
#   t_dbscan_dist <- microbenchmark::microbenchmark(
#     dbscan::dbscan(x, .3, 3, search = "dist"), times = 10, unit = "ms")
#   t_fpc <- microbenchmark::microbenchmark(
#     fpc::dbscan(x, .3, 3), times = 10, unit = "ms")
#
#   r <- rbind(t_fpc, t_dbscan_dist, t_dbscan_linear, t_dbscan)
#   r
#
#   boxplot(r,
#           names = c('fpc', 'dbscan (dist)', 'dbscan (linear)', 'dbscan (kdtree)'),
#           main = "Runtime comparison in ms")
#
#   ## speedup of the kd-tree-based version compared to the fpc implementation
#   median(t_fpc$time) / median(t_dbscan$time)
# }
# # }
# # NOT RUN {
# ## Example 3: manually create a frNN object for dbscan (dbscan only needs ids and eps)
# nn <- structure(list(ids = list(c(2,3), c(1,3), c(1,2,3), c(3,5), c(4,5)), eps = 1),
#                 class =  c("NN", "frNN"))
# nn
# dbscan(nn, minPts = 2)
library(stringr)
library(dplyr)
src_dir <- c('/Users/osangjin/Desktop/past/Recommendation-system/data')
src_file <- list.files(src_dir) # list
src_file_cnt <- length(src_file)
src_file_cnt
id_lst <- c()
for(i in 1:src_file_cnt) {
file_name <- gsub(pattern=' ', replacement = '', paste(src_dir, '/', src_file[i]))
user_id <- as.numeric(str_extract(src_file[i], '\\d+'))
df <- read.csv(file_name)
df_name <- paste('df',user_id, sep='')
id_lst[i] <- user_id
df <- df[, -1]
assign(df_name, df)
}
list_df_data <- mget(ls(pattern = "^df\\d+"))
list_df_data[1]
bindlist_df_data[1]
mylst <- list_df_data
library(dplyr)
bind_col(mylst)
bind_cols(mylst)
df_1 <- data.frame(x = 1:3, y = 1:3)
df_2 <- data.frame(x = 4:6, y = 4:6)
df_3 <- data.frame(x = 7:9, z = 7:9)
bind_rows(list(grp_1 = df_1, grp_2 = df_2, grp_3 = df_3), .id="group_id")
df_1
df_2
df_3
test_lst <- list(grp_1 = df_1, grp_2 = df_2, grp_3 = df_3)
test_lst
mylst
a
test_lst
a <- bind_rows(mylst, .id="group_id")
a
mylst
a
str(a)
test <- read.csv("test.csv", header=TRUE)
test <- read.csv("./test.csv", header=TRUE)
setwd("~/Desktop/past/Recommendation-system/source/recommend")
test <- read.csv("./test.csv", header=TRUE)
test <- read.csv("./test.csv")
test <- read.table("./test.csv")
test <- read.csv("test.csv")
test <- read.csv("test.csv")
test <- read.csv("test.csv")
test
nrow(a)
check_df <- function(df, i){
df_type <- class(df[[i]])
if (df_type[1] != "data.frame") {
df[[2]] <- as.data.frame(df[[2]])
df[[2]] <- t(df[[2]])
df[[2]][,2] <- as.numeric(df[[2]][,2])
}
return (df[[i]])
}
A <- list_df_data[[1]]
colnames(A) <- c("title", 1)
merge_df <- A
merge_df
bind_rows(mylst)
bind_cols(mylst)
mymergedf <- bind_cols(mylst)
library(dplyr)
mylst <- list_df_data
mymergedf <- bind_rows(mylst)
mymergedf
mylst[1]
df_1 <- data.frame(x = 1:3, y = 1:3)
df_2 <- data.frame(x = 4:6, y = 4:6)
df_3 <- data.frame(x = 7:9, z = 7:9)
test_lst <- list(grp_1 = df_1, grp_2 = df_2, grp_3 = df_3)
a <- bind_rows(mylst, .id="group_id")
ㅁ
a
df_1 <- data.frame(x = 1:3, y = 1:3)
df_2 <- data.frame(x = 4:6, y = 4:6)
df_3 <- data.frame(x = 7:9, z = 7:9)
test_lst <- list(grp_1 = df_1, grp_2 = df_2, grp_3 = df_3)
a <- bind_rows(test_lst, .id="group_id")
a
mymergedf <- bind_rows(mylst, .id="user")
mymergedf
columns(mymergedf)
names(mymergedf)
myuseritem <- spread(mymergedf, user, score)
df_1 <- data.frame(x = 1:3, y = 1:3)
df_2 <- data.frame(x = 4:6, y = 4:6)
df_3 <- data.frame(x = 7:9, z = 7:9)
test_lst <- list(grp_1 = df_1, grp_2 = df_2, grp_3 = df_3)
a <- bind_rows(test_lst, .id="group_id")
a
myuseritem <- spread(mymergedf, title, score)
library(dplyr)
mylst <- list_df_data
mymergedf <- bind_rows(mylst, .id="user")
myuseritem <- spread(mymergedf, title, score)
mymergedf
head(mymergedf)
class(mymergedf)
myuseritem <- spread(mymergedf, user, score)
check_df <- function(df, i){
df_type <- class(df[[i]])
if (df_type[1] != "data.frame") {
df[[2]] <- as.data.frame(df[[2]])
df[[2]] <- t(df[[2]])
df[[2]][,2] <- as.numeric(df[[2]][,2])
}
return (df[[i]])
}
head(user_item)
myuseritem <- spread(mymergedf, "user", "score")
head(mymergedf)
myuseritem <- spread(mymergedf, user, c("title", "score"))
myuseritem <- spread(mymergedf, user, score)
myuseritem
mymergedf <- bind_rows(mylst, .id="user")
mymergedf
is.na(mymergedf)
sum(is.na(mymergedf))
myuseritem <- spread(mymergedf, user, score)
id <- as.data.frame(c(1:nrow(mymergedf)))
cbind(id, mymergedf)
df <- cbind(id, mymergedf)
myuseritem <- spread(df, user, score)
View(myuseritem)
mymergedf$title <- as.factor(mymergedf$title)
id <- as.data.frame(c(1:nrow(mymergedf)))
df <- cbind(id, mymergedf)
myuseritem <- spread(df, user, score)
levels(myuseritem)
levels(myuseritem$title)
sum(levels(myuseritem$title))
summary(myuseritem$title)
summarise(myuseritem$title)
summary(levels(myuseritem$title))
nrow(myuseritem)
ncol(myuseritem)
library(stringr)
library(dplyr)
src_dir <- c('/Users/osangjin/Desktop/past/Recommendation-system/data')
src_file <- list.files(src_dir) # list
src_file_cnt <- length(src_file)
src_file_cnt
id_lst <- c()
for(i in 1:src_file_cnt) {
file_name <- gsub(pattern=' ', replacement = '', paste(src_dir, '/', src_file[i]))
user_id <- as.numeric(str_extract(src_file[i], '\\d+'))
df <- read.csv(file_name)
df_name <- paste('df',user_id, sep='')
id_lst[i] <- user_id
df <- df[, -1]
assign(df_name, df)
}
list_df_data <- mget(ls(pattern = "^df\\d+"))
check_df <- function(df, i){
df_type <- class(df[[i]])
if (df_type[1] != "data.frame") {
df[[2]] <- as.data.frame(df[[2]])
df[[2]] <- t(df[[2]])
df[[2]][,2] <- as.numeric(df[[2]][,2])
}
return (df[[i]])
}
A <- list_df_data[[1]]
colnames(A) <- c("title", 1)
merge_df <- A
i = 2
repeat{
if(i>src_file_cnt-1) break
B <- check_df(list_df_data,i)
colnames(B) <- c("title", i)
merge_df <- merge(x=merge_df, y=B, by='title', all=TRUE)
i <- i+1
}
restaurant_lst <- as.vector(merge_df[,1])
user_item <- merge_df[,-1]
rownames(user_item) <- paste("i", 1:nrow(user_item), sep='')
colnames(user_item) <- paste("u", 1:ncol(user_item), sep='')
View(user_item)
restaurant_lst
str(myuseritem)
trim(" Wa ET ")
library("stringr")
str_trim(" Wa WWT ")
mymergedf$title <- as.factor(str_trim(mymergedf$title))
library(dplyr)
library(stringr)
mylst <- list_df_data
mymergedf <- bind_rows(mylst, .id="user")
library(dplyr)
library(stringr)
mylst <- list_df_data
mymergedf <- bind_rows(mylst, .id="user")
mymergedf$title <- as.factor(str_trim(mymergedf$title))
id <- as.data.frame(c(1:nrow(mymergedf)))
df <- cbind(id, mymergedf)
myuseritem <- spread(df, user, score)
nrow(myuseritem)
head(myuseritem)
restaurant_lst <- as.vector(merge_df[,1])
user_item <- merge_df[,-1]
rownames(user_item) <- paste("i", 1:nrow(user_item), sep='')
colnames(user_item) <- paste("u", 1:ncol(user_item), sep='')
# View(user_item)
restaurant_lst
rowSums(origin)
origin <- user_item
rowSums(origin)
library(stringr)
library(dplyr)
src_dir <- c('/Users/osangjin/Desktop/past/Recommendation-system/data')
src_file <- list.files(src_dir) # list
src_file_cnt <- length(src_file)
src_file_cnt
id_lst <- c()
for(i in 1:src_file_cnt) {
file_name <- gsub(pattern=' ', replacement = '', paste(src_dir, '/', src_file[i]))
user_id <- as.numeric(str_extract(src_file[i], '\\d+'))
df <- read.csv(file_name)
df_name <- paste('df',user_id, sep='')
id_lst[i] <- user_id
df <- df[, -1]
assign(df_name, df)
}
list_df_data <- mget(ls(pattern = "^df\\d+"))
check_df <- function(df, i){
df_type <- class(df[[i]])
if (df_type[1] != "data.frame") {
df[[2]] <- as.data.frame(df[[2]])
df[[2]] <- t(df[[2]])
df[[2]][,2] <- as.numeric(df[[2]][,2])
}
return (df[[i]])
}
A <- list_df_data[[1]]
colnames(A) <- c("title", 1)
merge_df <- A
i = 2
repeat{
if(i>src_file_cnt-1) break
B <- check_df(list_df_data,i)
colnames(B) <- c("title", i)
merge_df <- merge(x=merge_df, y=B, by='title', all=TRUE)
i <- i+1
}
restaurant_lst <- as.vector(merge_df[,1])
user_item <- merge_df[,-1]
rownames(user_item) <- paste("i", 1:nrow(user_item), sep='')
colnames(user_item) <- paste("u", 1:ncol(user_item), sep='')
# View(user_item)
restaurant_lst
View(origin)
origin <- user_item
rowSums(origin)
rowSums(is.na(origin))
rowSums(is.na(origin))[1:100]
rowSums(!is.na(origin))[1:100]
which(rowSums(!is.na(origin)) > 1)
origin <- origin[which(rowSums(!is.na(origin)) > 1),]
library(stringr)
library(dplyr)
src_dir <- c('/Users/osangjin/Desktop/past/Recommendation-system/data')
src_file <- list.files(src_dir) # list
src_file_cnt <- length(src_file)
src_file_cnt
id_lst <- c()
for(i in 1:src_file_cnt) {
file_name <- gsub(pattern=' ', replacement = '', paste(src_dir, '/', src_file[i]))
user_id <- as.numeric(str_extract(src_file[i], '\\d+'))
df <- read.csv(file_name)
df_name <- paste('df',user_id, sep='')
id_lst[i] <- user_id
df <- df[, -1]
assign(df_name, df)
}
list_df_data <- mget(ls(pattern = "^df\\d+"))
check_df <- function(df, i){
df_type <- class(df[[i]])
if (df_type[1] != "data.frame") {
df[[2]] <- as.data.frame(df[[2]])
df[[2]] <- t(df[[2]])
df[[2]][,2] <- as.numeric(df[[2]][,2])
}
return (df[[i]])
}
A <- list_df_data[[1]]
colnames(A) <- c("title", 1)
merge_df <- A
i = 2
repeat{
if(i>src_file_cnt-1) break
B <- check_df(list_df_data,i)
colnames(B) <- c("title", i)
merge_df <- merge(x=merge_df, y=B, by='title', all=TRUE)
i <- i+1
}
restaurant_lst <- as.vector(merge_df[,1])
user_item <- merge_df[,-1]
rownames(user_item) <- paste("i", 1:nrow(user_item), sep='')
colnames(user_item) <- paste("u", 1:ncol(user_item), sep='')
user_item <- user_item[which(rowSums(!is.na(user_item)) > 1),]
# View(user_item)
restaurant_lst
restaurant_lst <- as.vector(merge_df[,1])
restaurant_lst
user_item <- merge_df[,-1]
rownames(user_item) <- paste("i", 1:nrow(user_item), sep='')
colnames(user_item) <- paste("u", 1:ncol(user_item), sep='')
user_item <- user_item[which(rowSums(!is.na(user_item)) > 1),]
# View(user_item)
install.packages("proxy")
install.packages("proxy")
install.packages("proxy")
install.packages("proxy")
install.packages("proxy")
install.packages("proxy")
